package sk.uniza.fri.algoritmy;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Scanner;

/**
 * Created by IntelliJ IDEA.
 * User: PC1
 * Date: 2021-04-27
 * Time: 5:54 p.m.
 * AUTHOR: UNIZA_FRI_5ZYI27_MATEJ_DZIABA
 */
public class Dijkstra {
    //private final int nekonecno = 9999;

    private final int n; // pocet vrcholov grafu
    private final int m; // pocet hran grafu
    private final int[][] h; // pole udajov o hranach

    private final int nekonecno = 9999;

    private int[][] X;
    private int[][] C;

    private int u;
    private int v;

    public Dijkstra(int pocetVrcholov, int pocetHran) {
        this.n = pocetVrcholov;
        this.m = pocetHran;
        this.h = new int[1 + this.m][3];
        this.C = new int[this.n + 1][this.n + 1];
        this.X = new int[this.n + 1][this.n + 1];
    }

    /*
    Nacitanie grafu zo suboru:
    Na kazdom riadku su tri cisla, prve a druhe cislo su cisla vrcholov
    a tretie cislo je ohodnotenie hrany.
    Pocet vrcholov aj pocet hran sa urci automaticky. Pocet hran je rovny
    poctu riadkov v subore a pocet vrcholov je rovny najvacsiemu cislu
    vrcholu v udajoch o hranach.
    */
    public static Dijkstra nacitajSubor(String nazovSuboru) throws FileNotFoundException {

        // otvorim subor a pripravim Scanner pre nacitavanie
        Scanner scanner = new Scanner(new FileInputStream(nazovSuboru) {
        });

        // najskor len zistim pocet vrcholov a pocet hran
        int pocetVrcholov = 1;
        int pocetHran = 0;

        // prejdem cely subor
        while (scanner.hasNext()) {
            // nacitam udaje o hrane
            int u = scanner.nextInt();
            int v = scanner.nextInt();
            int c = scanner.nextInt();

            // nacital som hranu, zvysim ich pocet o 1
            pocetHran++;

            // skontrolujem, ci netreba zvysit pocet vrcholov
            if (pocetVrcholov < u) {
                pocetVrcholov = u;
            }
            if (pocetVrcholov < v) {
                pocetVrcholov = v;
            }
        }
        // ukoncim nacitavanie zo suboru
        scanner.close();

        // vytvorim objekt grafu s potrebnym poctom vrcholo v aj hran
        Dijkstra g = new Dijkstra(pocetVrcholov, pocetHran);

        // po druhy krat otvorim ten isty subor,
        // uz poznam pocet vrcholov aj hran a mam alokovanu pamat
        scanner = new Scanner(new FileInputStream(nazovSuboru));

        // postune nacitam vsetky hrany
        // tentokrat si ich uz budem aj ukladat do pamate
        for (int j = 1; j <= pocetHran; j++) {
            int u = scanner.nextInt();
            int v = scanner.nextInt();
            int c = scanner.nextInt();

            g.h[j][0] = u;
            g.h[j][1] = v;
            g.h[j][2] = c;
        }

        return g;
    }

    public void printInfo() {

        System.out.println("Pocet vrcholov: " + this.n);
        System.out.println("Pocet hran: " + this.m);

        System.out.println("G=(V,H)");

        System.out.print("V={");

        for (int i = 1; i <= this.n; i++) {
            if (i == 1) {
                System.out.print("" + i);
            } else {
                System.out.print("," + i);
            }
        }
        System.out.println("}");

        System.out.print("H={");
        for (int j = 1; j <= this.m; j++) {
            if (j > 1) {
                System.out.print(",");
            }
            System.out.print("(" + this.h[j][0] + "," + this.h[j][1] + ") " + this.h[j][2]);
        }
        System.out.println("}");
    }

    public void dijkstrovAlgoritmus(int u, int v) {
        final int nekonecno = 9999999;

        //KROK 1 Inicializacia

        // t1[i], ktore sa nemoze menit
        int[] t1 = new int[this.n + 1];
        int[] x = new int[this.n + 1]; // cesta
        int r = u;                     // riadiaci vrchol

        Znacka[] t2 = new Znacka[this.n + 1];

        t2[r] = Znacka.TRVALA;

        for (int i = 1; i < t1.length; i++) {
            if (i == u) {
                t1[u] = 0;
            } else {
                t1[i] = nekonecno;
                t2[i] = Znacka.DOCASNA;
            }
            x[i] = 0;
        }

        // KROK 2
        while (r != v) { // ridiaci je rozny od koncoveho
            for (int i = 1; i < h.length; i++) { // prejdem vsetky hrany
                if (h[i][0] == r && t2[h[i][1]] == Znacka.DOCASNA) {
                    int novaCesta = t1[r] + h[i][2];
                    if (novaCesta < t1[h[i][1]]) {
                        t1[h[i][1]] = novaCesta;
                        x[h[i][1]] = r; // cesta sa rovna r
                    }
                }
            }

            // KROK 3
            int minimum = nekonecno;
            int minIndex = -1;

            for (int i = 1; i < t1.length; i++) {
                if (t2[i] == Znacka.DOCASNA && t1[i] < minimum) {
                    minimum = t1[i];
                    minIndex = i;
                }
            }

            // hladanie noveho riadiaceho vrchola
            if (minIndex == -1) {
                break;
            }
            t2[minIndex] = Znacka.TRVALA;  // znacka je trvala
            r = minIndex;
        }

        // cesta - hladanie
        ArrayList<Integer> zoznamVysledkov = hladanieCesty(u, v, x);

        // otocenie cesty
        int[] otocene = otocenieCesty(zoznamVysledkov);

        System.out.println("");
        System.out.print("Cesta je: ");

        for (int i = 0; i < otocene.length; i++) {
            if (i != otocene.length - 1) {
                System.out.print(otocene[i] + "(" + otocene[i] + "," + otocene[i + 1] + ")");
            }
        }
        System.out.println(v);

    }

    private ArrayList<Integer> hladanieCesty(int u, int v, int[] x) {
        ArrayList<Integer> zoznamVysledkov = new ArrayList<>();
        int aktualny = v;        // koncovy vrchol - v
        while (aktualny != u) { // zaciatocny - u
            zoznamVysledkov.add(aktualny);
            aktualny = x[aktualny];
        }
        zoznamVysledkov.add(u); // pridaj zaciatocny
        return zoznamVysledkov;
    }

    private int[] otocenieCesty(ArrayList<Integer> zoznamVysledkov) {
        int[] otocene = new int[zoznamVysledkov.size()];
        for (int i = 0; i < zoznamVysledkov.size(); i++) {
            otocene[zoznamVysledkov.size() - 1 - i] = zoznamVysledkov.get(i);
        }
        return otocene;
    }

    private enum Znacka {
        TRVALA,
        DOCASNA;
    }
}
