public class Zakladny {

    private final int n; // pocet vrcholov grafu
    private final int m; // pocet hran grafu
    private final int[][] h; // pole udajov o hranach

    //private final int nekonecno = 9999;

    public Zakladny(int pocetVrcholov, int pocetHran) {
        this.n = pocetVrcholov;
        this.m = pocetHran;
        this.h = new int[1 + this.m][3];
    }

    /*
    Nacitanie grafu zo suboru:
    Na kazdom riadku su tri cisla, prve a druhe cislo su cisla vrcholov
    a tretie cislo je ohodnotenie hrany.
    Pocet vrcholov aj pocet hran sa urci automaticky. Pocet hran je rovny
    poctu riadkov v subore a pocet vrcholov je rovny najvacsiemu cislu
    vrcholu v udajoch o hranach.
    */
    public static Zakladny nacitajSubor(String nazovSuboru) throws FileNotFoundException {

        // otvorim subor a pripravim Scanner pre nacitavanie
        Scanner scanner = new Scanner(new FileInputStream(nazovSuboru) {
        });

        // najskor len zistim pocet vrcholov a pocet hran
        int pocetVrcholov = 1;
        int pocetHran = 0;

        // prejdem cely subor
        while (scanner.hasNext()) {
            // nacitam udaje o hrane
            int u = scanner.nextInt();
            int v = scanner.nextInt();
            int c = scanner.nextInt();

            // nacital som hranu, zvysim ich pocet o 1
            pocetHran++;

            // skontrolujem, ci netreba zvysit pocet vrcholov
            if (pocetVrcholov < u) {
                pocetVrcholov = u;
            }
            if (pocetVrcholov < v) {
                pocetVrcholov = v;
            }
        }
        // ukoncim nacitavanie zo suboru
        scanner.close();

        // vytvorim objekt grafu s potrebnym poctom vrcholo v aj hran
        Zakladny g = new Zakladny(pocetVrcholov, pocetHran);

        // po druhy krat otvorim ten isty subor,
        // uz poznam pocet vrcholov aj hran a mam alokovanu pamat
        scanner = new Scanner(new FileInputStream(nazovSuboru));

        // postune nacitam vsetky hrany
        // tentokrat si ich uz budem aj ukladat do pamate
        for (int j = 1; j <= pocetHran; j++) {
            int u = scanner.nextInt();
            int v = scanner.nextInt();
            int c = scanner.nextInt();

            g.h[j][0] = u;
            g.h[j][1] = v;
            g.h[j][2] = c;
        }

        return g;
    }

    public void printInfo() {

        System.out.println("Pocet vrcholov: " + this.n);
        System.out.println("Pocet hran: " + this.m);

        System.out.println("G=(V,H)");

        System.out.print("V={");

        for (int i = 1; i <= this.n; i++) {
            if (i == 1) {
                System.out.print("" + i);
            } else {
                System.out.print("," + i);
            }
        }
        System.out.println("}");

        System.out.print("H={");
        for (int j = 1; j <= this.m; j++) {
            if (j > 1) {
                System.out.print(",");
            }
            System.out.print("(" + this.h[j][0] + "," + this.h[j][1] + ") " + this.h[j][2]);
        }
        System.out.println("}");
    }

    public void zakladnyAlgoritmus(int u) {

        // Krok 1 - Inicializacia
        int[] t = new int[1 + this.n];    // znacka t  -  horny odhad dlzky, najlepsej u-i cesty
        int[] x = new int[1 + this.n];    // znacka x  -  predposledny vrchol

        final int nekonecno = 999999;

        for (int i = 1; i <= this.n; i++) {
            if (i == u) {
                t[i] = 0;
            } else {
                t[i] = nekonecno;
            }
            x[i] = 0;
        }


        boolean jeZmena;

        // Krok 2
        do {
            jeZmena = false;

            for (int jj = 1; jj <= this.m; jj++) {

                int i = this.h[jj][0];
                int j = this.h[jj][1];
                int c = this.h[jj][2];             // Zistime, ci existuje orientovana hrana(i, j) z mnoziny hran

                // Krok 2
                if (t[j] > (t[i] + c)) {

                    t[j] = t[i] + c;
                    x[j] = i;
                    jeZmena = true;

                    System.out.println("Prepisujem pri vrchole: " + j + " na " + t[j] + "/" + x[j]);
                }
            }
        } while (jeZmena);

        // cesta - hladanie
        for (int v = 1; v < this.n; v++) {
            ArrayList<Integer> zoznamVysledkov = hladanieCesty(u, v, x);

            // otocenie cesty
            int[] otocene = otocenieCesty(zoznamVysledkov);

            System.out.println("");
            System.out.print("Cesta je: ");

            for (int i = 0; i < otocene.length; i++) {
                if (i != otocene.length - 1) {
                    System.out.print(otocene[i] + "(" + otocene[i] + "," + otocene[i + 1] + ")");
                }
            }
            System.out.println(v);
        }
    }

    private ArrayList<Integer> hladanieCesty(int u, int v, int[] x) {
        ArrayList<Integer> zoznamVysledkov = new ArrayList<>();
        int aktualny = v;        // koncovy vrchol - v
        while (aktualny != u) { // zaciatocny - u
            zoznamVysledkov.add(aktualny);
            aktualny = x[aktualny];
        }
        zoznamVysledkov.add(u); // pridaj zaciatocny
        return zoznamVysledkov;
    }

    private int[] otocenieCesty(ArrayList<Integer> zoznamVysledkov) {
        int[] otocene = new int[zoznamVysledkov.size()];
        for (int i = 0; i < zoznamVysledkov.size(); i++) {
            otocene[zoznamVysledkov.size() - 1 - i] = zoznamVysledkov.get(i);
        }
        return otocene;
    }

}
